ELECTRIC FIELD CALCULATION BASED ON TRILINEAR INTERPOLATION

                            Rob Agnese
                         Graduate Student
                University of Florida Physics Department
                      Adviser: Dr. Tarek Saab
                        ragnese@phys.ufl.edu

This software utilizes the free software, Qhull to calulate the Delaunay
triangulation of a set of 3D points. For copyright info, please read 
COPYING.txt included with this software.



INTRODUCTION:
This software creates a C++ class called DetectorField that is a daughter
class of G4ElectricField.

The constructor takes as its argument a filename of a COMSOL, or other plain
text file that has data beginning on the 9th line. Each line contains four values:
x,y,z,V where V is the potential at point (x,y,z).

The software then builds and saves a triangulation of the volume. The user calls
the GetFieldValue member function, passing a coordinate at which the field
is calculated and an array in which the electric field components are returned.

Included in this distribution is a trivial example showing the use of this
class to calculate the electric field at some point in a volume.



INSTALLATION:
The best way to use this code is to compile in as part of a project with CMake.
Take the qhull-2012.1 directory and place it into the include/ directory of your
project. Also place Epot.hh in the include/ directory. Place Epot.cc in your src/
directory.

Paste the contents of PASTEME into your CMakeLists.txt file.

At the end of your CMakeLists.txt file, make sure that your executable options
look like this:
#------------------------------------

add_executable(sample sample.cc ${sources} ${headers})
target_link_libraries(sample ${Geant4_LIBRARIES})
target_link_libraries(sample qhullcpp)
target_link_libraries(sample qhullstatic_p)
set_target_properties(sample PROPERTIES
    COMPILE_DEFINITIONS "qh_QHpointer")
set(CMAKE_CXX_FLAGS "-O2")

#------------------------------------

It is necessary to compile with "qh_QHpointer" for Qhull.
It is strongly recommended to compile with "-O2" optimization for performance
reasons. Epot.cc utilizes a lot of std::vector operations and without the
compiler's intelligent optimizations, performance is significantly reduced.

Then compile your project with CMake as normal.


EXAMPLE:
Also included is an example program called test.cc that utilizes the Epot code.
The included CMakeLists.txt will build the test executable. This can be built with 
CMake in the standard way. This example CMakeLists.txt is also a good starting point
for writing a CMakeLists.txt for a project utilizing the Epot code.
