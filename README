G4CMP -- Geant4 add-on framework for phonon and charge-carrier physics

	D. Brant, P. Redl, R. Agnese, M. Kelsey (who else?)


This package provide a collection of particle types, physics processes, and
supporting utilities to simulate a limiting set of solid-state physics
processes in Geant4.  Developed for the low-temperature community, the
package support production and propagation of acoustic phonons and
electron-hole pairs through solid crystals such as germanium.


User Environment
================

Users must have a recent (10.0-patch-02 or later) version of GEANT4
installed, and they must have their environment configured (using
<g4-install-dir>/share/Geant4-<version>/geant4make/geant4make.csh or ...sh).

Add the G4CMP environment variables using the g4cmp_env.csh or ...sh scripts
found in the G4CMP top level directory.

G4CMP is only configured for use on Linux and MacOSX platforms.  A minimum
configuration requires GCC 4.4.7 or later (required by the QHull package).

Several configuration parameters are available through environment variables
and macro commands, as listed below.  Most of these affect charge carrier
propagation and related processes.


Environment variable	Macro command		Value/action
====================	=============		============
G4LATTICEDATA		/g4cmp/LatticeData	Directory with lattice configs
G4CMP_DEBUG		/g4cmp/verbose		>0: Enable diagnostic messages
G4CMP_VOLTAGE [V]	/g4cmp/voltage <V>	!=0: Apply uniform +Z voltage
G4CMP_EPOT_FILE [F]	/g4cmp/EpotFile <F>	V=0: Read mesh field file "F"
G4CMP_MIN_STEP [S]	/g4cmp/minimumStep <S>	S>0: Force minimum step S*L0
G4CMP_LUKE_PHONONS [R]	/g4cmp/produceLukePhonons <R>
						Generate phonons every R hits
G4CMP_HIT_FILE [F]	/g4cmp/HitsFile <F>	Write e/h hit locations to "F"

The environment variable $G4CMP_LUKE_PHONONS controls whether whether the
two LukeScattering processes (eLukeScattering and hLukeScattering) produce
secondary phonons (and what fraction of the time), or only records the
phonon energy as non-ionizing energy loss (NIEL) on the track:

	unsetenv G4CMP_LUKE_PHONONS	# No secondary phonons generated
	setenv G4CMP_LUKE_PHONONS 1	# Generate phonon at every occurrence
	setenv G4CMP_LUKE_PHONONS 0.001	# Generate phonon 1:1000 occurrences

Generating seconary phonons will significantly slow down the simulation.

Two optional environment variables are used to configure the electric field
across the germanium crystal.  G4CMP_VOLTAGE specifies the voltage across
the crystal, used to generate a uniform electric field (no edge or corner
effects) from the bottom to the top face.  If the voltage is zero (the
default), then G4CMP_EPOT_FILE specifies the name of the mesh electric field
field to be loaded for the g4cmpCharge test job.  The default name is
"Epot_iZip4_small", found in the charge/ directory.

For developers, there is a G4CMP_DEBUG environment variable which may be set
(e.g., setenv G4CMP_DEBUG 1) before building the libraries.  This variable
will turn on some additional diagnostic output which may be of interest.

For developers, there is a environment and Make variable,
G4CMP_SET_ELECTRON_MASS, to enable compilation of code to set step-by-step
dynamical effective mass, kinetic energy and velocity for electrons.  This
should allow end users to query G4Track or G4Step directly and obtain the
true kinematical quantities for the electron in the lattice.  However, this
operation is currently inconsistent with GEANT4, due to an issue in
G4Transportation.cc, and results in non-physical electron drift speeds.


Building the Package
====================

After configuring your environment, build the G4CMP library with the command

	make library

The libraries (libg4cmp.so and libqhull.so) will be written to your
$G4WORKDIR/lib/$G4SYSTEM/ directory, just like any other Geant4 example or
user code, and should be found automatically when linking an application.

With the library built, any of the three demonstration programs (phonon,
charge, and channeling) may be built as a normal GEANT4 user application.
From the top-level directory, use the command

	make examples

to build them all, or

	make <name>

to build just one (where <name> is the directory name of interest).  The
executables will be named "g4cmpPhonon", "g4cmpCharge", and
"g4cmpChanneling", respectively, and will be written to
$G4WORKDIR/bin/$G4SYSTEM.


Defining the Crystal Dynamics
=============================

In a user's application, each active G4CMP material (e.g., germanium
crystals or diamonds) must have a collection of dynamical parameters
defined.  These parameters are used by the phonon and charge-carrier
processes to know how to create, propagate, and scatter the particles
through the crystal.

Each material's parameters are stored in a subdirectory under CrystalMaps
(or wherever the envrionment variable G4LATTICEDATA points).  G4CMP is
distributed with germanium data, in CrystalMaps/Ge/.  We recommend naming
additional directories by element or material, matching the Geant4
conventions.

The parameter definition file is config.txt.  Each line starts with a
keyword, followed by one or more values.  Any line which starts with "#" is
ignored, as is any text after a "#" on a parameter line.
